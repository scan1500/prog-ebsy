


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             ctxsw_s, CODE, READONLY
    2 00000000         ; acces variables, defined in our C-code
    3 00000000                 EXTERN           cur_pid
    4 00000000                 EXTERN           next_pid
    5 00000000                 EXTERN           cur_sp
    6 00000000                 EXTERN           next_sp
    7 00000000                 EXTERN           SysTick_CTRL
    8 00000000         
    9 00000000         ; set up first process
   10 00000000         ; This pops the entry-address for the first process from
                        it's stack.
   11 00000000         ; Further, the updated SP is stored into PSP, because we
                       're using PSP for our 'user-procs' later on.
   12 00000000         ; At start, Cortex-M3 uses the MSP.
   13 00000000         ; At last we turn on the SysTick-Timer and then branch t
                       o entry-point of first process.
   14 00000000         firstProc
                               PROC
   15 00000000                 export           firstProc   ; make routine call
                                                            able from C-code
   16 00000000 4669            mov              r1, sp      ; save current msp
   17 00000002 4685            mov              sp, r0      ; change sp to firs
                                                            t process' sp
   18 00000004 F85D EB04       pop              {lr}        ; get entry-point f
                                                            rom stack
   19 00000008 4668            mov              r0, sp
   20 0000000A F380 8809       msr              psp, r0     ; write current sp 
                                                            to psp, as we're us
                                                            ing this one later
   21 0000000E F381 8808       msr              msp, r1     ; restore msp
   22 00000012 F04F 0102       mov              r1, #2
   23 00000016 F381 8814       msr              control, r1 ; switch to psp
   24 0000001A F3BF 8F6F       isb                          ; Docs say we need 
                                                            to do this, wheneve
                                                            r we're switching s
                                                            tacks. 
   25 0000001E 480D            ldr              r0, =SysTick_CTRL
   26 00000020 6801            ldr              r1, [r0]
   27 00000022 6808            ldr              r0, [r1]
   28 00000024 F040 0007       orr              r0, #0x7
   29 00000028 6008            str              r0, [r1]    ; turn on SysTick
   30 0000002A 4770            bx               lr          ; branch ot entry-p
                                                            oint of first proce
                                                            ss
   31 0000002C                 ENDP
   32 0000002C         
   33 0000002C         ctxsw   PROC
   34 0000002C                 export           ctxsw
   35 0000002C F3EF 8309       mrs              r3, psp     ; copy value from p
                                                            sp to r3. This is t
                                                            he current proc's s
                                                            tack-pointer
   36 00000030 3B20            subs             r3, #0x20   ; 32 Byte space on 
                                                            stack for 8 registe
                                                            rs
   37 00000032 E883 0FF0       stmia            r3, {r4-r11} ; store registers 
                                                            to stack. lowest re
                                                            gister number goes 
                                                            to lowest stack-add



ARM Macro Assembler    Page 2 


                                                            ress. lr = r14, so 
                                                            lr is pushed last.
   38 00000036 4808            ldr              r0, =cur_sp
   39 00000038 6800            ldr              r0,[r0]
   40 0000003A 6003            str              r3, [r0]    ; update the proc's
                                                             stack pointer to t
                                                            he new location
   41 0000003C 4807            ldr              r0, =next_sp
   42 0000003E 6800            ldr              r0,[r0]
   43 00000040 6803            ldr              r3, [r0]    ; Grab stack pointe
                                                            r from next process
                                                             to access it's sta
                                                            ck
   44 00000042 4907            ldr              r1, =cur_pid
   45 00000044 4A07            ldr              r2, =next_pid
   46 00000046 6812            ldr              r2, [r2]
   47 00000048 600A            str              r2, [r1]    ; cur_pid = next_pi
                                                            d
   48 0000004A E8B3 0FF0       ldmia            r3!, {r4-r11} ; restore next pr
                                                            oc's context (see t
                                                            he comment for stmi
                                                            a before)
   49 0000004E F383 8809       msr              psp, r3     ; move r3 to psp, s
                                                            o the next process 
                                                            has the correct sta
                                                            ck pointer
   50 00000052 4770            bx               lr          ; return to PendSV_
                                                            Handler
   51 00000054                 ENDP
   52 00000054         
   53 00000054                 END
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\ctxsw.d -o.\objects\ctxsw.o -IC:\Keil_v5\ARM\RV31\INC -I
C:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\NXP\LPC177x_8x --predefine="_
_UVISION_VERSION SETA 524" --list=.\listings\ctxsw.lst ctxsw.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ctxsw 0000002C

Symbol: ctxsw
   Definitions
      At line 33 in file ctxsw.s
   Uses
      At line 34 in file ctxsw.s
Comment: ctxsw used once
ctxsw_s 00000000

Symbol: ctxsw_s
   Definitions
      At line 1 in file ctxsw.s
   Uses
      None
Comment: ctxsw_s unused
firstProc 00000000

Symbol: firstProc
   Definitions
      At line 14 in file ctxsw.s
   Uses
      At line 15 in file ctxsw.s
Comment: firstProc used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SysTick_CTRL 00000000

Symbol: SysTick_CTRL
   Definitions
      At line 7 in file ctxsw.s
   Uses
      At line 25 in file ctxsw.s
Comment: SysTick_CTRL used once
cur_pid 00000000

Symbol: cur_pid
   Definitions
      At line 3 in file ctxsw.s
   Uses
      At line 44 in file ctxsw.s
Comment: cur_pid used once
cur_sp 00000000

Symbol: cur_sp
   Definitions
      At line 5 in file ctxsw.s
   Uses
      At line 38 in file ctxsw.s
Comment: cur_sp used once
next_pid 00000000

Symbol: next_pid
   Definitions
      At line 4 in file ctxsw.s
   Uses
      At line 45 in file ctxsw.s
Comment: next_pid used once
next_sp 00000000

Symbol: next_sp
   Definitions
      At line 6 in file ctxsw.s
   Uses
      At line 41 in file ctxsw.s
Comment: next_sp used once
5 symbols
341 symbols in table
